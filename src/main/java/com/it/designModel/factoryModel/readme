作业:
1、用UML绘制出三种工厂模式的类结构图。
   见UML包中png图片。

2、深刻理解产品族和产品等级结构之间的关系。
    产品族可以理解为产品线，产品等级结构可以理解为每条产品线上的各种差异化的产品。
    在一个工厂建厂的时候，并不能决定有几条产品线，但是可以决定这个共产生产产品的
    大的品类（也就是等级结构），未来工厂生产的具体产品，将由每条产品线自行决定，
    这就是对工厂所定义的产品品类的差异化生产。未来如果工厂想增加生产之前各条产品
    线都没有生产的产品时（当然还在工厂之前所定的大的品类下），就新开一条产品线就
    可以；未来共厂如果需要再增加一种产品品类，各个产品线也都要按照这个要求，去新
    开一条流水线来完成该品类下在当前产品线的具体实现。因此如果工厂的产品品类
    （等级结构）总是在变化的时候，每条产品线下都需要新增流水线，变化这么频繁，就
    不事宜用这种方法建厂了，所以这就是抽象工厂方法的主要弊端之一。
3、自主完成三种工厂模式的代码实现，理解简单工厂、工厂方法和抽象工厂的区别。
    如果没有工厂设计模式，我们也是可以实现需求的功能的，有工厂设计模式只是为了使
    代码更加整洁，抽象，避免很多不必要的重样化的操作。工厂设计模式主要是为了统一
    对象的创建入口，统一同样化方法调用的入口。当代码中的很多对象都有类似的结构，
    要实现类似功能的时候，不必重复去new对象，调各自方法。具体三种工厂模式的区别
    如下
    简单工厂：传统式的作坊，都有产品的生产都糅杂在一起，没有产品线之分，来吧，告
    诉我你要什么产品（入参），就给你什么产品。这种工厂适合生产产品品类比较少的产
    品，因为如果产品种类很多，都用的同一条流水线，在代码上体现会是很多的条件判断。
    而且因为都在同一个工厂中区创建所需的对象，索引以后扩展都需要修改此方法，违背
    了开闭原则，还有所有对象在一个方法中创建，违背了单一只能原则。
    工厂方法：传统型的工厂，解决简单工厂的问题，初步体现了差异化分工，对产品进行
    分类，对每一类产品都新设一条产品线来生产，每次创建产品，就避免作坊式的生产，
    在具体的产品线上来生产。缺点是因为虽然是对产品进行了分类，进而创建不同的产品
    线，但是这样以后每要生产一种产品就创建一条产品线（在代码里就是新建一个工厂）
    就显得很浪费。所以如果产品种类较多，也不太适合使用工厂方法模式
    抽象工厂：适合用于当产品线较多，且每一产品线下产品种类较多的情况。缺点是，当
    工厂的产品品类需要经常新增的时候，也就是等级结构经常变化的时候，各条产品线都
    需要新增以实现。不符合代码的开闭原则。但是如果版本功能迭代不那么频繁，产品线
    较多，产品等级结构比较丰富的时候，抽象工厂时足可以胜任的。